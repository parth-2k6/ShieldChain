SheildChain 1 

import { useState } from 'react';
import { ethers } from 'ethers';

// Environment Variables
const RPC_URL = 'https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID';
const CONTRACT_ADDRESS = '0xYourContractAddress';

// Mock contract ABI
const contractABI = [
    {
        "constant": true,
        "inputs": [],
        "name": "getSecurityStatus",
        "outputs": [{ "name": "", "type": "string" }],
        "type": "function"
    }
];

// Provider and contract initialization
const provider = new ethers.JsonRpcProvider(RPC_URL);
const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI, provider);

// Mock Audit Results (for testing)
const mockAuditResults = {
    "contractAddress": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
    "auditStatus": "Passed",
    "auditDetails": {
        "vulnerabilities": 0,
        "securityRating": "A+",
        "issues": [],
        "auditDate": "2024-01-25"
    }
};

// Fetch Audit Results (Mocked for Testing)
const fetchAuditResults = async (contractAddress) => {
    try {
        // Simulating a successful fetch with mock data
        return mockAuditResults;
    } catch (error) {
        return { error: 'Failed to fetch audit results' };
    }
};

// Fetch Monitoring Data (from contract)
const fetchMonitoringData = async () => {
    try {
        const events = await contract.queryFilter('Transfer', -1000);
        return events.map((event) => {
            return {
                event: event.event,
                from: event.args.from,
                to: event.args.to,
                value: ethers.utils.formatEther(event.args.value), // Format value if in wei
                timestamp: new Date(event.blockTime * 1000).toISOString(), // Convert timestamp to ISO string
            };
        });
    } catch (error) {
        return { error: 'Monitoring failed' };
    }
};

// Next.js Frontend Component
export default function Home() {
    const [contractAddress, setContractAddress] = useState('');
    const [auditResults, setAuditResults] = useState(null);
    const [monitoringData, setMonitoringData] = useState(null);

    const handleFetchAuditResults = async () => {
        if (!contractAddress) {
            setAuditResults({ error: 'Please enter a contract address' });
            return;
        }
        const data = await fetchAuditResults(contractAddress);
        setAuditResults(data);
    };

    const handleFetchMonitoringData = async () => {
        const data = await fetchMonitoringData();
        setMonitoringData(data);
    };

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">ShieldChain: AI-Powered Smart Contract Security</h1>
            <input 
                type="text" 
                value={contractAddress} 
                onChange={(e) => setContractAddress(e.target.value)} 
                placeholder="Enter Contract Address"
                className="border p-2 w-full mb-4"
            />
            <button onClick={handleFetchAuditResults} className="bg-blue-500 text-white px-4 py-2 mr-2">Run Audit</button>
            <button onClick={handleFetchMonitoringData} className="bg-green-500 text-white px-4 py-2">Monitor Contract</button>
            
            {auditResults && (
                <div className="mt-4 p-4 border">
                    <h2 className="text-xl font-bold">Audit Results</h2>
                    <pre>{JSON.stringify(auditResults, null, 2)}</pre>
                </div>
            )}
            
            {monitoringData && (
                <div className="mt-4 p-4 border">
                    <h2 className="text-xl font-bold">Monitoring Data</h2>
                    <pre>{JSON.stringify(monitoringData, null, 2)}</pre>
                </div>
            )}
        </div>
    );
}
